(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{266:function(e,t,i){"use strict";i.r(t);var a=i(38),r=Object(a.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"std-lib-for-php"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#std-lib-for-php","aria-hidden":"true"}},[e._v("#")]),e._v(" std/lib: for php")]),e._v(" "),i("h2",{attrs:{id:"overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),i("p",[i("code",[e._v("std/lib")]),e._v(" is a "),i("em",[e._v("very")]),e._v(" ambitious project.")]),e._v(" "),i("p",[i("code",[e._v("std/lib")]),e._v(" is a set of libraries, meant to primarily be implemented in PHP to solve many problems of general PHP development and within the PHP ecosystem.")]),e._v(" "),i("p",[i("strong",[i("code",[e._v("std/lib")]),e._v(" is not a framework")]),e._v(".  It is a set of common APIs to solve common problems faced by PHP developers in a vendor-neutral, "),i("em",[e._v("framework-neutral")]),e._v(" way.")]),e._v(" "),i("p",[i("strong",[i("code",[e._v("std/lib")]),e._v(" SHALL NOT CREATE IMPLEMENTATIONS OF FUNTIONALITY ITSELF, UNLESS ABSOLUTELY REQUIRED TO DO SO.")])]),e._v(" "),i("p",[e._v("Priorities to implementation of wrappers will be where PHP suffers the most: Process Control, Threading, Asynchronous Execution, Error Handling, and functionality you would expect to find in a “standard runtime library”.")]),e._v(" "),i("h2",{attrs:{id:"goals"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#goals","aria-hidden":"true"}},[e._v("#")]),e._v(" Goals")]),e._v(" "),i("p",[e._v("Instead of re-implementing things that already exist, "),i("code",[e._v("std/lib")]),e._v(" is here to:")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Provide wrappers around standard PHP functionality, well-known, and lesser-known libraries/frameworks/functionality:")]),e._v(" "),i("p",[i("small",[e._v("These may be fairly transparent wrappers ("),i("code",[e._v("Std\\Redis\\Client")]),e._v(" is basically the same as predis, just with an adapter interface to use a different implementation)")])]),e._v(" "),i("p",[i("small",[e._v("These may be as more complex anti-corruption layers which improve/hide poorly exposed but well implemented libraries.")])]),e._v(" "),i("p",[i("small",[e._v("These may be facades, which simplify complex operations.")])])]),e._v(" "),i("li",[i("p",[e._v("Provide bridges in/out of various existing frameworks.")]),e._v(" "),i("p",[i("small",[e._v("While this is improving with PSR-x standards, it's still a big giant mess if you want to use more than one framework, parts from different frameworks, parts from framework-independent libraries, or any mix of the three.")])])]),e._v(" "),i("li",[i("p",[e._v("Help standardize things")]),e._v(" "),i("p",[i("small",[e._v("The hope here is that by supporting many library implementations with quality APIs, as well as quality wrappers around base functionality that it will become a de-facto standard of how to access "),i("em",[e._v("X")]),e._v(".")])])])]),e._v(" "),i("p",[e._v('Again, primitive functionality aside (string/array type low-level functionality -- or "glue" for cross-library/framework libraries) this is '),i("strong",[e._v("NOT")]),e._v(" an attempt to re-implement any "),i("em",[e._v("functionality")]),e._v(".")]),e._v(" "),i("h2",{attrs:{id:"guarantees"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#guarantees","aria-hidden":"true"}},[e._v("#")]),e._v(" Guarantees")]),e._v(" "),i("p",[e._v("The purpose is "),i("em",[e._v("only")]),e._v(" to provide existing implementations wrapped in a "),i("em",[e._v("type-safe")]),e._v(" and "),i("em",[i("u",[e._v("strict")])]),e._v(" API.  Additionally, unless "),i("strong",[e._v("clearly")]),e._v(" specified otherwise, stable releases MUST provide the following objective guarantees:")]),e._v(" "),i("ul",[i("li",[e._v("Generally, independent of php extensions installed.  See "),i("router-link",{attrs:{to:"/Extensions.html"}},[e._v("Extensions")])],1),e._v(" "),i("li",[e._v("No PHP-level "),i("code",[e._v("E_*")]),e._v(" notices, warnings, or errors.  Only exceptions are thrown in error situations.")]),e._v(" "),i("li",[e._v('No "mixed" return types or parameters - except in those that are for the normalization or determination of values and types, or for development.')]),e._v(" "),i("li",[e._v("No globally namespaced functions or classes.")])]),e._v(" "),i("p",[i("em",[e._v("This list is expected to expand.")])]),e._v(" "),i("p",[e._v("We also hope to provide the following subjective guarantees:")]),e._v(" "),i("ul",[i("li",[e._v("A stable, well thought-out exception tree.")]),e._v(" "),i("li",[e._v('The best "backend" implementation by default.  Zend, Symfony, Laravel, League, Cake, Concrete, or "other" framework-independent implementation -- we have no bias, only bias twoards well-written code.')]),e._v(" "),i("li",[e._v('Through various bridges, providing all frameworks with implementations of "mission critical" quality code.')])]),e._v(" "),i("h2",{attrs:{id:"wrappers"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#wrappers","aria-hidden":"true"}},[e._v("#")]),e._v(" Wrappers")]),e._v(" "),i("p",[e._v("Standard library implementations will, in order of preference:")]),e._v(" "),i("ul",[i("li",[e._v("Compose new classes (composition) with underlying implementations passed-in with dependency injection, with the “preferred” implementation auto-injected. (alternatively, create internally if absolutely necessary)")]),e._v(" "),i("li",[e._v("Inherit underlying implementations where it must be done, i.e, adapters.  Multiple adapters that inherit different implementations MAY be provided as separate packages (i.e, adapter for Zend, adapter for Symfony, etc).")]),e._v(" "),i("li",[e._v("Fork project(s) and provide slightly modified versions of packages, keeping it up-to-date with the upstream version where absolutely necessary.")]),e._v(" "),i("li",[e._v("Implement it ourselves, as a final resort.")])]),e._v(" "),i("h2",{attrs:{id:"planned-namespace-use"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#planned-namespace-use","aria-hidden":"true"}},[e._v("#")]),e._v(" Planned Namespace Use")]),e._v(" "),i("p",[e._v("Example:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("std\\")]),e._v(" namespace for generics.")]),e._v(" "),i("li",[i("code",[e._v("stdlib\\")]),e._v(" namesapce for implementations.")]),e._v(" "),i("li",[i("code",[e._v("std\\NetUtil")]),e._v(" for basic utilities.")]),e._v(" "),i("li",[i("code",[e._v("stdlib\\Net\\Server")]),e._v(" for full implementations.")])]),e._v(" "),i("h2",{attrs:{id:"next-steps"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#next-steps","aria-hidden":"true"}},[e._v("#")]),e._v(" Next Steps")]),e._v(" "),i("p",[i("strong",[e._v("ALL CODE IS SUBJECT TO CHANGE AT PRESENT")]),e._v(".  Currently, "),i("code",[e._v("std/lib")]),e._v(" is in "),i("em",[e._v("very")]),e._v(" early stages of development. Until the 1.0 release, anything is subject to change.")]),e._v(" "),i("ul",[i("li",[e._v("[ ] Which libraries are most important from the "),i("router-link",{attrs:{to:"/Library-Wish-List.html"}},[e._v("Library Wish List")]),e._v("? - Put into a fully prioritized list.")],1),e._v(" "),i("li",[e._v("[ ] What is the best way to organize the base array, string, and low-level utility functionality?")]),e._v(" "),i("li",[e._v("[ ] Are there other guarantees we should consider?")]),e._v(" "),i("li",[e._v("[ ] Begin implementation\n"),i("ul",[i("li",[e._v("[ ] Implement “base” library - strings, array, value validation, and other core functions.")]),e._v(" "),i("li",[e._v("[ ] Implement "),i("code",[e._v("app-*")]),e._v(" libaries.")]),e._v(" "),i("li",[e._v("[ ] (Expand out to top 3 priorities in Wish List)")])])]),e._v(" "),i("li",[e._v("[ ] Are there other well known frameworks we should consider full or partial compatibility with?")]),e._v(" "),i("li",[e._v("[ ] What is the minimum quality that will be acceptable for stable releases?")]),e._v(" "),i("li",[e._v("[ ] What is the minimum quality that will be acceptable for development releases?")]),e._v(" "),i("li",[e._v("[ ] Get public feedback")]),e._v(" "),i("li",[e._v("[ ] Get public interest")]),e._v(" "),i("li",[e._v("[ ] Does BSD vs MIT licensing really matter?")]),e._v(" "),i("li",[e._v("[ ] Why is Rust, for example, licensed under Apache 2 as well as BSD (or MIT?)")])])])},[],!1,null,null,null);t.default=r.exports}}]);